Course name- Linux Administration: The Complete Linux Bootcamp.
Taught By- Andrei Dumitrescu, Crystal Mind Academy.
Total main modules- 46.
Start date - 03-Feb-2025. 


>> Module 1- Getting started: 
    > Course outline.
    > How to get the most out of the course?

>> Module 2- Setting up the environment:
    > Linux distributions.
    > Installing ubuntu.
    > Things to do after installing.
    > Migrating to Linux.

>> Module 3- The linux terminal:
    > Terminal, Console, Shell and Commands:
        -> Terminal: The tool used to type the Commands.
        -> Console: The environment in which the terminal runs. 
        -> Shell: The brain that interprets & runs the commands.
        -> Commands: Instructions given to the shell, to perform different tasks or operations.
    > Linux command structure:
        -> Command name.
        -> Options.
        -> Arguments.
    > Getting help:
        -> man command.
        -> Provides detailed information about any specific command.
    > Learning the terminal:
        -> Tab key: Auto-complete commands.
        -> clear command.
        -> cat command.
        -> rm command.
    > Learning the terminal- Keyboard shortcuts:
        -> ctrl + l: Clear the terminal.
        -> ctrl + d: Exit the terminal.
        -> ctrl + a: Move the cursor to the beginning of the line.
        -> ctrl + e: Move the cursor to the end of the line.
        -> ctrl + u: Delete everything before the cursor.
        -> ctrl + c: Stop the currently running command.
        -> ctrl + z: Suspend the currently running command.
    > Learning the terminal- Bash history:
        -> Bash shell starts in the user's home directory.
        -> .bash_history file stores the history of commands.
        -> HISTFILESIZE is an environment variable that sets the number of commands to store.
        -> To print the value of variable: echo $<file-name>.
        -> By default, the value of HISTFILESIZE is 2000 (Ubuntu 24.04.1 LTS).
        -> history command: Displays the history of commands from the .bash_history file.
        -> HISTSIZE is an environment variable that sets the number of commands to store in the memory.
        -> By default, the value of HISTSIZE is 1000 (Ubuntu 24.04.1 LTS).
        -> The history in .bash_history is only saved when the terminal is closed.
        -> !<command_indexNumber>: Re-run the command with the specified index number.
        -> !!: Re-run the last command.
        -> !-n: Re-run the nth command from the last command.
        -> ctrl + p: Move to the previous command.
        -> ctrl + n: Move to the next command.
        -> ctrl + r: Search the command history. 
        -> history -d <command_indexNumber>: Delete the command with the specified index number.
        -> history -c: Clear the history of commands.
    > Runnind commands withoug leaving a trace:
        -> Giving a space before entering a command prevents it from being saved in the history.
        -> HISTCONTROL is an environment variable that sets the commands to ignore in the history.
        -> By default, the value of HISTCONTROL is ignoredups:ignorespace.

>> Module 4- The Linux terminal in depth:
    > Recording the date & time for each line in history:
        -> HISTTIMEFORMAT is an environment variable that sets the format of the date & time.
        -> By default, the value of HISTTIMEFORMAT is %F %T.
        -> %F: Full date.
        -> %T: Time.
    > Root vs Unprivileged user(s):
        -> Unprivileged user: A user with limited access to the system. 
                              Also known as the Regular user. 
                              They can only work within their home directory.
        -> Root user: A user with full access to the system. 
                      Also know as the Superuser or the Administrator.
        -> Gain root access:
            -> sudo su command: Superuser do and switch user.
            -> Enter the password when prompted.
            -> The terminal prompt changes to # when the root access is gained.
            -> All normal users prompt ends with $.
            -> Root user prompt ends with #.
            -> sudo <command>: Run a command with root privileges.
            -> Enter the password when prompted.
            -> Once, the root access is gained using the root credentials, the root credentials are cached for 15 minutes.
        -> sudo -v command: Refresh the sudo credentials.
        -> sudo -k command: Expire the sudo credentials.
        -> passwd command: Change the password.
        -> sudo passwd <username>: Change the password of a specific user.
        -> su <username>: Switch to a specific user.
        -> su: Switch to the root user.
    
>> Module 5- The Linux file system:
        > Intro to the linux file system:
            -> A file system is a way to organize, store and retrieve data on a storage device in a structured and logical manner.
            -> On a Linux System, everything is treated as a file, including all external devices like: USB, HardDrive, etc.
            -> If something is not a file, it is a process.
            -> In Linux, the file system is a hierarchical structure- arranged in a Tree-like architecture.
            -> The root directory is the top-level directory in the file system or the base level.
            -> The root directory is represented by a forward slash (/).
            -> All other directories and files are spreaded from the root or '/' directory.
            -> Linux folows a FHS (Filesystem Hierarchy Standard) to maintain the file system.
            -> The FHS provides a strandard layout for the directories and files, which ensures consistency across different Linux distributions.
            -> The directories or files present on different partitions or disks are also shown or mounted under the root directory.
            -> Mounting a file system means making the files and directories in the file system accessible to the user.
            -> Mount point is the directory where the file system is mounted.
            -> df -h command: Display the disk space usage.
        > The FileSystem Hierarchy Standard:
            -> /bin directory: Consisit of essential user command binaries(executable programs- ls, rm, cat, etc). These commands are available to all users and play a crucial role in the basic system functionality.
            -> /sbin directory: Consists of essential system command binaries(executable programs- fdisk, mkfs, etc). These commands are available to the root user and play a crucial role in the system administration.
            -> /boot directory: Boot directory consist of all the files, that are required to start the system.
            -> /home directory: This directory consist of all the user's data.
                                Each user has its own personal directory within /home.
                                Every user's directory consist of user's personal files, configuration settings, and directories.
                                /home directory ensures that each user's files and settings are kept separate from others.

                                *Note: ~ is a shortcut for the current user's home directory.
                                       'cd ~' is same as 'cd /home/<username>'.
            -> /root directory: The root user's home directory.
                                The root user is the superuser or the administrator of the system.
                                The root user has full access to the system and can perform any operation.
            -> /dev directory: Device directory consist of all the device files.
                               Device files are special files that represent hardware devices like hard drives, USB drives, etc.
                               Device files are used to interact with the hardware devices.
                               Device files are created by the kernel when the system boots up.
                               Device files are used to read and write data to the hardware devices.
            -> Special files: Files that represents hardware devices or provides a mechanism for inter process communication.
            -> /etc directory: Etc directory consist of all the system configuration files. Full form- etcetera.
                               System configuration files are used to configure the system settings.
                               System configuration files are used to set up the system according to the user's requirements.
                               System configuration files are used to configure the system services.
            -> /lib directory: Library directory consist of all the shared libraries.
                               Shared libraries are used by the system and the applications to perform various functions.
                               Shared libraries are loaded into the memory when the system boots up.
                               Shared libraries are used to provide common functions to the system and the applications.
            -> /media directory: Media directory consist of all the removable media devices.
                                 External devices like USB drives, CD/DVD drives, etc. are mounted under the /media directory.
            -> /mnt directory: Mount directory consist of all the temporary mount points.
                               Temporary mount points are used to mount external devices or network shares temporarily.
                               Temporary mount points are used to access the data on the external devices or network shares.
            -> /tmp directory: Temporary directory consist of all the temporary files.
                               Temporary files are created by the system and the applications for temporary use.
                               Temporary files are deleted when the system reboots.
            -> /proc directory: Process directory consist of all the process information.
                                Process information is stored in the /proc directory.
                                Process information is used by the system and the applications to manage the processes.
                                Process information is stored in the form of files and directories.
            -> cat /proc/cpuinfo: Display the CPU information.
            -> cat /proc/meminfo: Display the memory information.
            -> /sys directory: Sys directory consist of all the system information.
                               System information is stored in the /sys directory.
                               System information is used by the system and the applications to manage the system resources.
                               System information is stored in the form of files and directories.
            -> /srv directory: Service directory consist of all the service data.
                               Service data is stored in the /srv directory.
                               Service data is used by the system and the applications to provide services.
                               Service data is stored in the form of files and directories.
            -> /run directory: Run directory consist of all the runtime data.
                               Runtime data is stored in the /run directory.
                               Runtime data is used by the system and the applications during the system runtime.
                               Runtime data is stored in the form of files and directories.
            -> /usr directory: User directory consist of all the user data.
                               User data is used by the system and the applications to provide user-specific data.
                               User data is stored in the form of files and directories.
            -> /var directory: Variable directory consist of all the variable data.
                               Variable data is used by the system and the applications to store variable data.
        > Absolute vs Relative paths:
            -> pwd command: Print the current working directory.
            -> Absoulte paths: The full path of a file or directory from the root directory.
                               It used forward slash (/) as the separator.
                               Use '/' after every directory name.
                               Example: /home/username/Documents/file.txt.
                               Absolute paths are more reliable.
            -> Relative paths: The path of a file or directory relative to the current working directory.
                                 It does not start with a forward slash (/).
                                 Use '.' to represent the current directory.
                                 Use '..' to represent the parent directory.
                                 Example: cd Documents.
                                         cd ..
            -> -a option: Display the hidden files.
            -> tree command: Display the directory structure in a tree-like format.
        > The 'ls' commands in depth:
            -> -S option: Sort the files by size.
            -> du command: Display the disk usage of files and directories.
            -> du -sh <directory_name>: Display the disk usage of a directory in human-readable format.
            -> ls -X: Sort the files by extension.
            -> ls --hide option: Hide the specified files or directories.
            -> ls -R option: List the files recursively. Recursively means to list the files and directories inside the subdirectories.
            -> The ls aliased have a default color coding for different types of files:
                -> Blue: Directory.
                -> Green: Executable file.
                -> Red: Archive file.
                -> Cyan: Symbolic link.
                -> Yellow: Device file.
                -> Magenta: Image file.
                -> White: Text file.
            -> The original listing commands without the alias is- \ls.
>> Module 6- The Linux file system(Part 2):
        > Linux files timestamp: 
            -> Linux has three different file timestamps:
                1. Access time (atime): The last time the file was accessed.
                2. Modification time (mtime): The last time the file's content was modified.
                3. Change time (ctime): The last time the file's metadata was changed. 
            -> stat command: Display the file's timestamps.
            -> ls -lu: Display the access time.
            -> ls -lt: Display the modification time.
            -> ls -lc: Display the change time.   
            -> Use touch <file_name> command to update the timestamps.
            -> touch -a <file_name>: Update the access time.
            -> touch -m <file_name>: Update the modification time.
            -> touch -c <file_name>: Update the change time.
            -> touch -t <timestamp> <file_name>: Update the timestamp to the specified value.
            -> ls -lt: Sort the files by modification time.
            -> ls -r option: Reverse the order of the output.
        > File types in Linux:
            -> .log files: Log files.
            -> .txt files: Text files.
            -> .conf files: Configuration files.
            -> .sh files: Shell script files.
            -> '-' denotes a regular file.
            -> 'd' denotes a directory.
            -> 'l' denotes a symbolic link.
            -> 'c' denotes a character device file.
            -> 'b' denotes a block device file.
            -> 's' denotes a socket file.
            -> 'p' denotes a named pipe file.
            -> ls -F option: Display the file types.
            -> '/' indicates a directory.
            -> '@' indicates a symbolic link.
            -> '|' indicates a named pipe file.
            -> '*' indicates an executable file.
            -> '=' indicates a socket file.
            -> ' ' indicates a regular file.
            -> file command: Display the file type.
            -> file /<directory_name>/*: Display the file type of all the files in the directory.
        > Viewing files:
            -> cat command: Display the contents of a file.
            -> cat -n option: Display the line numbers.
            -> Concatinating files using cat:
                -> cat file1 file2 > newfile: Concatenate file1 and file2 into newfile.
        > Viewing file(part 2):
            -> less command: Display the contents of a file page by page.
            -> less -N option: Display the line numbers.
            -> less -X option: Clear the screen before displaying the file.
            -> less -S option: Truncate long lines.
            -> ctrl + f: Move forward one page.
            -> ctrl + b: Move backward one page.
            -> g or <: Move to the beginning of the file.
            -> G or >: Move to the end of the file.
            -> / <pattern>: Search for a pattern.
            -> n: Move to the next occurrence of the pattern.
            -> N: Move to the previous occurrence of the pattern.
            -> q: Quit the less command.
            -> ? <pattern>: Search backward for a pattern.
        > Viewing file(part 3):
            -> tail command: Display the last 10 lines of a file.
            -> tail -n <number> <file_name>: Display the last n lines of a file.
            -> tail -f <file_name>: Display the last 10 lines of a file and keep the file open for new lines.
            -> head command: Display the first 10 lines of a file.
            -> head -n <number> <file_name>: Display the first n lines of a file.
            -> watch command: Run a command repeatedly and display the output.
            -> watch -n <interval> <command>: Run a command repeatedly at the specified interval.
            -> watch -d <command>: Highlight the differences between the outputs.
            -> watch -n 1 -d ifconfig: Display the network interface information.
        > Creating directories & files: 
            -> mkdir <directory_name>: Create a new directory.
            -> mkdir -p <directory_name>: Create a new directory and its parent directories.
            -> cp <source> <destination>: Copy files and directories.
            -> cp -v <source> <destination>: Copy files and directories verbosely. The -v flag or option shows the copid file source and destination path.
            -> cp -i <source> <destination>: Copy files and directories interactively. The -i flag or option prompts before overwriting the destination file.
>> Module 7- The Linux file system(Part 3): 
        > Move & rename directories and files:
            -> mv <source> <destination>: Move or rename files and directories.
            -> mv -v <source> <destination>: Move or rename files and directories verbosely. The -v flag or option shows the moved file source and destination path.
            -> mv -i <source> <destination>: Move or rename files and directories interactively. The -i flag or option prompts before overwriting the destination file.
            -> mv -n <source> <destination>: Move or rename files and directories without overwriting the destination file.
            -> mv -u <source> <destination>: Move or rename files and directories only if the source is newer than the destination.
        > Remove directories & files:
            -> rm <file_name>: Remove files.
            -> rm -r <directory_name>: Remove directories and their contents recursively.
            -> rm -f <file_name>: Remove files forcefully.
            -> rm -i <file_name>: Remove files interactively. The -i flag or option prompts before removing the file.
            -> rm -v <file_name>: Remove files verbosely. The -v flag or option shows the removed file path.
            -> rm -rf <directory_name>: Remove directories and their contents forcefully and recursively.
            -> rm -rfi <directory_name>: Remove directories and their contents forcefully, recursively, and interactively.
            -> rm -rfv <directory_name>: Remove directories and their contents forcefully, recursively, and verbosely.
        > Pipes & redirection:
            -> Pipes: Pipes are used to redirect the output of one command as the input to another command.
            -> Redirection: Redirection is used to redirect the output of a command to a file or another command.
            -> |: Pipe symbol.
            -> >: Redirect the output to a file. If the file does not exist, it will be created. If the file exists, it will be overwritten.
            -> >>: Append the output to a file. If the file does not exist, it will be created. If the file exists, the output will be appended.
            -> <: Redirect the input from a file.
            -> 2>: Redirect the error output to a file.
            -> 2>&1: Redirect the error output to the standard output.
            -> tee command: Read from standard input and write to standard output and files.
            -> tee -a <file_name>: Append the output to a file.
            -> tee -i <file_name>: Ignore the interrupt signal.
            -> tee -p <file_name>: Preserve the permissions of the file.
            -> tee -v <file_name>: Display the output verbosely.
            -> tee -a -i -p -v <file_name>: Append the output to a file, ignore the interrupt signal, preserve the permissions of the file, and display the output verbosely.
        > Data streams:
            -> Standard input (stdin): The input stream that carries data into a command.
            -> Standard output (stdout): The output stream that carries data out of a command.
            -> Standard error (stderr): The error stream that carries error messages out of a command.
            -> grep command: Search for a pattern in a file.
            -> cut command: Cut out the sections from each line of a file.
>> Module 8- The Linux file system(Part 4):
        > Locate files:
            -> locate command: Find files by name.
            -> locate -i <file_name>: Find files by name case-insensitively.
            -> locate -r <pattern>: Find files by a regular expression.
            -> updatedb command: Update the database used by the locate command.
            -> updatedb -l 0: Update the database without logging.
            -> updatedb -U <directory>: Update the database for the specified directory.
            -> updatedb -v: Update the database verbosely.
            -> updatedb -h: Display the help message.
            -> find command: Find files by name, type, size, etc.
            -> find <directory> -name <file_name>: Find files by name.
            -> find <directory> -iname <file_name>: Find files by name case-insensitively.
            -> find <directory> -type <file_type>: Find files by type.
            -> find <directory> -size <file_size>: Find files by size.
            -> find <directory> -empty: Find empty files.
            -> find <directory> -user <username>: Find files by user.
            -> find <directory> -group <groupname>: Find files by group.
            -> find <directory> -mtime <days>: Find files by modification time.
            -> find <directory> -mmin <minutes>: Find files by modification time in minutes.
            -> find <directory> -ctime <days>: Find files by change time.
            -> find <directory> -cmin <minutes>: Find files by change time in minutes.
            -> find <directory> -atime <days>: Find files by access time.
            -> find <directory> -amin <minutes>: Find files by access time in minutes.
            -> find <directory> -exec <command>: Execute a command on the found files.
            -> find <directory> -delete: Delete the found files.
            -> find <directory> -print: Print the found files.
            -> find <directory> -ls: List the found files.
>> Module 9- The linux file system(Part 5):
        > Comparing files: 
            -> cmp command: Compare two files byte by byte.
            -> cmp -l <file1> <file2>: Compare two files byte by byte and display the differing bytes.
            -> diff command: Compare two files line by line.
            -> diff -u <file1> <file2>: Compare two files line by line and display the differences in unified format.
            -> diff -c <file1> <file2>: Compare two files line by line and display the differences in context format.
            -> diff -r <directory1> <directory2>: Compare two directories recursively.
            -> a & d: Indicates the added and deleted lines.
            -> < & >: Indicates the lines from the first and second file.
            -> -B flag or option: Ignore the blank lines.
            -> -i flag or option: Ignore the case differences.
            -> -w flag or option: Ignore the whitespace differences.
            -> -y flag or option: Display the differences side by side.
        > VIM Editor:
            -> Open a file using vim: vim <file_name>.
            -> :wq or :x: Save and exit.            
            -> Command mode (Esc): Press the Esc key to enter the command mode.
            -> Insert mode (i): Press the i key to enter the insert mode.
            -> Visual mode (v): Press the v key to enter the visual mode.
            -> I command: Insert at the beginning of the line.
            -> A command: Append at the end of the line.
            -> O command: Open a new line below the current line.
            -> :q! command: Quit without saving.
            -> :w command: Save the file.
            -> :wq command: Save and exit.
            -> :x command: Save and exit.
            -> shift + zz: Save and exit.
            -> vimtutorial command: Open the vim tutorial.
            -> x command: Delete a character.
            -> dw command: Delete a word.
            -> d$ command: Delete from the cursor to the end of the line.
            -> dd command: Delete the current line. 
            -> u command: Undo the last change.
            -> U command: Undo all the changes on the current line.
            -> p command: Paste the deleted text.
            -> r command: Replace a character.
            -> ctrl + g command: CURSOR LOCATION AND FILE STATUS.
            -> G command: Move to the end of the file.
            -> gg command: Move to the beginning of the file.
            -> /<pattern> command: Search for a pattern.
            -> n command: Move to the next occurrence of the pattern.
            -> N command: Move to the previous occurrence of the pattern.
            -> % command: Move to the matching bracket.
>> Module 10- The linux file system(Part 6):
    > Compressing & archiving directories & files: 
        -> tar command: Create, extract, and manage tar archives.
        -> tar -cvf <archive_name> <file_name>: Create a tar archive.
        -> tar -xvf <archive_name>: Extract a tar archive.
        -> tar -tvf <archive_name>: List the contents of a tar archive.
        -> tar -czvf <archive_name> <file_name>: Create a compressed tar archive.
        -> tar -xzvf <archive_name>: Extract a compressed tar archive.
        -> tar -tzvf <archive_name>: List the contents of a compressed tar archive. 
    > Inode & links:
        -> Inode: An inode is a data structure that stores the metadata of a file.
        -> Inode number: A unique number assigned to each inode.
        -> ls -i <file_name>: Display the inode number.
        -> ls -i: Display the inode number of all the files in the directory.
        -> Links: Links are pointers to the inode of a file.
        -> Hard links: Hard links are pointers to the inode of a file.
        -> ln <source> <destination>: Create a hard link.
        -> ln -v <source> <destination>: Create a hard link verbosely.
        -> ln -i <source> <destination>: Create a hard link interactively.
        -> ln -s <source> <destination>: Create a symbolic link.
        -> ln -sv <source> <destination>: Create a symbolic link verbosely.
        -> ln -si <source> <destination>: Create a symbolic link interactively.
        -> ls -l: Display the number of links.
        -> ls -l <file_name>: Display the number of links of a file.
        -> ls -l: Display the number of links of all the files in the directory.    
        -> stat <file_name>: Display the inode number.   
>> Module 11- User account management: 
    > Basic understanding:
        -> /etc/passwd: User account information.
        -> /etc/shadow: User password information.
        -> There are seven fields in each line in /etc/passwd directory:
            ->> Field 1- User's login name.
            ->> Field 2- User's password. Encrypted password or 'x' for shadow password. If the second field is empty, that means the user does not have to enter any password to log in.
            ->> Field 3- User's ID number. 
            ->> Field 4- User's group ID number.
            ->> Field 5- User's full name or comment.
            ->> Field 6- User's home directory.
            ->> Field 7- User's login shell.
        -> There are nine fields in each line in /etc/shadow directory:
            ->> Field 1- User's login name.
            ->> Field 2- Encrypted password.
            ->> Field 3- Number of days since the password was last changed.
            ->> Field 4- Number of days before the password may be changed.
            ->> Field 5- Number of days after which the password must be changed.
            ->> Field 6- Number of days before the password expires that the user is warned.
            ->> Field 7- Number of days after the password expires that the account is disabled.
            ->> Field 8- Number of days since January 1, 1970, that the account has been disabled.
            ->> Field 9- Reserved field.
        -> Groups: A group is a collection of users.
        -> /etc/group: Group information.
        -> There are two types of groups:
            ->> Primary group: The group that is associated with the user when the user is created.
            ->> Secondary group: The groups that are associated with the user after the user is created.
        -> Adding or creating new users:
            ->> useradd <username>: Add a new user.
            ->> useradd -m <username>: Add a new user with a home directory.
            ->> useradd -d <directory> <username>: Add a new user with a specific home directory.
            ->> useradd -c <comment> <username>: Add a new user with a comment.
            ->> useradd -g <groupname> <username>: Add a new user to a specific group.
            ->> useradd -G <groupname> <username>: Add a new user to a secondary group.
            ->> useradd -s <shell> <username>: Add a new user with a specific shell.
            ->> useradd -p <password> <username>: Add a new user with a password.
            ->> useradd -u <uid> <username>: Add a new user with a specific user ID.
            ->> useradd -e <expiry_date> <username>: Add a new user with an expiry date.
            ->> useradd -f <inactive_days> <username>: Add a new user with an inactive days.
            ->> useradd -e <expiry_date> -f <inactive_days> -p <password> <username>: Add a new user with an expiry date, inactive days, and password.
        -> Adding or creating new group(s):
            ->> groupadd <groupname>: Add a new group.
            ->> groupadd -g <gid> <groupname>: Add a new group with a specific group ID.
        -> Modifying user(s):
            ->> usermod <username>: Modify a user.
            ->> usermod -l <new_username> <username>: Modify a user's login name.
            ->> usermod -c <comment> <username>: Modify a user's comment.
            ->> usermod -d <directory> <username>: Modify a user's home directory.
            ->> usermod -g <groupname> <username>: Modify a user's primary group.
            ->> usermod -G <groupname> <username>: Modify a user's secondary group.
            ->> usermod -s <shell> <username>: Modify a user's shell.
            ->> usermod -p <password> <username>: Modify a user's password.
            ->> usermod -u <uid> <username>: Modify a user's user ID.
            ->> usermod -e <expiry_date> <username>: Modify a user's expiry date.
            ->> usermod -f <inactive_days> <username>: Modify a user's inactive days.
            ->> usermod -e <expiry_date> -f <inactive_days> -p <password> <username>: Modify a user's expiry date, inactive days, and password.
        -> Modifying group(s):
            ->> groupmod <groupname>: Modify a group.
            ->> groupmod -g <gid> <groupname>: Modify a group's group ID.
        -> Deleting user(s):   
            ->> userdel <username>: Delete a user.
            ->> userdel -r <username>: Delete a user and its home directory.
        -> Deleting group(s):
            ->> groupdel <groupname>: Delete a group.
        -> Viewing user(s):
            ->> id <username>: Display the user's information.
            ->> id -u <username>: Display the user's user ID.
            ->> id -g <username>: Display the user's group ID.
            ->> id -G <username>: Display the user's secondary groups.
            ->> id -n <uid>: Display the user's name.
            ->> id -un <gid>: Display the group's name.
        -> Viewing group(s):
            ->> groups <username>: Display the user's groups.
            ->> groups <groupname>: Display the group's users.
            ->> getent group <groupname>: Display the group's information.
        -> Switching user(s):
            ->> su <username>: Switch to a user.
            ->> su - <username>: Switch to a user with the user's environment.
            ->> sudo -u <username> <command>: Run a command as a user.
            ->> sudo -l: List the user's sudo privileges.
            ->> sudo -l -U <username>: List the user's sudo privileges for a specific user.
        -> RUID vs EUID: 
            ->> RUID: Real User ID. The user who is running the process.
            ->> EUID: Effective User ID. The user who owns the process.
            ->> whoami command: Display the current user.
            ->> who command: Display the users who are logged in.
            ->> id command: Display the user's information.
            ->> w command: Display the users who are logged in and their processes.
            ->> last command: Display the last logged in users.
>> Module 12- File permissions:
    > File permissions or modes specify the access rights to files and directories.
        -> By default, the owner of the file has read, write, and execute permissions.
        -> The group of the file has read and execute permissions.
        -> chown command: Change the owner and group of a file.
        -> chgrp command: Change the group of a file.
        -> A file(s) has three permission modes:
            ->> Read (r): The file can be read.
            ->> Write (w): The file can be written.
            ->> Execute (x): The file can be executed.
            ->> Every file has 9 permission bits:
                ->> Owner permissions: Read, write, and execute(First 3 characters, after the first character).
                ->> Group permissions: Read, write, and execute(Middle 3 characters).
                ->> Others permissions: Read, write, and execute(Last 3 characters).
        -> r, w, x, - denotes the permissions.
            ->> r denotes read permission.
            ->> w denotes write permission.
            ->> x denotes execute permission.
            ->> - denotes no permission.
    > Octal Numeric Notation:
        -> The octal numeric notation is a way to represent the file permissions using numbers.
        -> Each permission is represented by a number:
            ->> Read (r): 4.
            ->> Write (w): 2.
            ->> Execute (x): 1.
            ->> No permission (-): 0.
        -> The octal numeric notation is calculated by adding the numbers of the permissions:
            ->> Read and write: 4 + 2 = 6.
            ->> Read, write, and execute: 4 + 2 + 1 = 7.
        -> stat command: Display the file's permissions.
    > Change file(s) permission(s)"
        -> chmod command: Change the file permissions.
        -> chmod <mode> <file_name>: Change the file permissions.
        -> chmod -R <mode> <directory_name>: Change the file permissions recursively.
        -> chmod -v <mode> <file_name>: Change the file permissions verbosely.
        -> chmod -c <mode> <file_name>: Change the file permissions and display the changes.
        -> chmod -f <mode> <file_name>: Change the file permissions forcefully.
        -> chmod -R -v -c -f <mode> <directory_name>: Change the file permissions recursively, verbosely, and display the changes.
        -> chmod a <operator> <permission> <file_name>: Change the file permissions for all users.
        -> chmod --reference <reference_file> <file_name>: Change the file permissions to match the reference file.
        -> User category:
            ->> u: User.
            ->> g: Group.
            ->> o: Others.
            ->> a: All.
        -> Operations:
            ->> +: Add the permission.
            ->> -: Remove the permission.
            ->> =: Set the permission.
        -> Parent directory permission are given priority over the child directory permission.
>> Module 13- File permissions(Part-2):
    > Changing file ownership:
        -> chown command: Change the owner and group of a file.
        -> chown <owner>:<group> <file_name>: Change the owner and group of a file.
        -> chown -R <owner>:<group> <directory_name>: Change the owner and group of a directory recursively.
        -> chown id <owner>:<group> <file_name>: Change the owner and group of a file by ID.
        -> Only root can change the owner and group of a file.
        -> A non-privileged user can only change the group of a file to a group that the user is a member of.
        -> lscpu command: Display the CPU information.
    > Special permissions:
        -> Special permissions are used to provide additional access to files and directories.
        -> Special permissions are set using the octal numeric notation.
        -> Setuid (SUID): Set the user ID.
        -> Setgid (SGID): Set the group ID.
        -> Sticky bit: Restrict the deletion of files in a directory by other users.
        -> chmod u+s <file_name>: Set the user ID.
        -> chmod g+s <file_name>: Set the group ID.
        -> chmod +t <directory_name>: Set the sticky bit.
        -> chmod -s <file_name>: Remove the special permissions.
        -> chmod -t <directory_name>: Remove the sticky bit.
        -> 4, 2, 1, 0 denotes the special permissions.
            ->> Setuid (SUID): 4(Followed by permission's octal value).
            ->> Setgid (SGID): 2(Followed by permission's octal value).
            ->> Sticky bit: 1(Followed by permission's octal value).
            ->> No special permission: 0.
        -> ls -l: Display the special permissions of all the files in the directory.
        -> ls -ld: Display the special permissions of all the directories in the directory.
        -> find -perm -4000: Find files with the setuid permission.
    > UMASK (User Mask):
        -> Umask is a three-digit octal number that sets the default file permissions.
        -> Umask is subtracted from the maximum permission to get the default permission.
        -> The default umask value is 0022.
        -> umask command: Display the umask value.
        -> umask <value>: Set the umask value.
        -> umask -S: Display the umask value in symbolic notation.
        -> umask -p: Display the umask value in octal notation.
        -> umask -S <value>: Set the umask value in symbolic notation.
        -> umask -p <value>: Set the umask value in octal notation.
    > File attributes:
        -> chattr command: Change the file attributes.
        -> chattr +i <file_name>: Set the immutable attribute.
        -> chattr -i <file_name>: Remove the immutable attribute.
        -> chattr +a <file_name>: Set the append-only attribute.
        -> chattr -a <file_name>: Remove the append-only attribute.
        -> chattr +d <file_name>: Set the no dump attribute.
        -> chattr -d <file_name>: Remove the no dump attribute.
        -> chattr +c <file_name>: Set the compressed attribute.
        -> chattr -c <file_name>: Remove the compressed attribute.
        -> chattr +u <file_name>: Set the undeletable attribute.
        -> chattr -u <file_name>: Remove the undeletable attribute.
        -> lsattr command: Display the file attributes.
        -> lsattr -a <file_name>: Display the file attributes of a file.
        -> lsattr -d <directory_name>: Display the file attributes of a directory.
        -> lsattr -R <directory_name>: Display the file attributes recursively.
        -> lsattr -a -d -R <file_name>: Display the file attributes of a file, directory, and recursively.
>> Module 14- Process Management:
    > Processes:
        -> A running instance of a program is called a process.
        -> Process is an active entity.
        -> If a shell built-in command is executed, a new process is not created.
        -> Process properties:
            ->> Process ID (PID): A unique number assigned to each process.
            ->> Parent Process ID (PPID): The ID of the parent process.
            ->> User ID (UID): The ID of the user who owns the process.
            ->> Group ID (GID): The ID of the group who owns the process.
            ->> Process Status: The current state of the process.
            ->> Process Priority: The priority of the process.
            ->> Process Nice Value: The nice value of the process.
            ->> Process CPU Usage: The CPU usage of the process.
            ->> Process Memory Usage: The memory usage of the process.
            ->> Process Start Time: The time when the process started.
            ->> Process Command: The command that started the process.
        -> Types of processes: 
            ->> Foreground process: A process that runs in the foreground.
            ->> Background process: A process that runs in the background.
            ->> Zombie process: A process that has completed its execution but still has an entry in the process table.
            ->> Orphan process: A process whose parent process has terminated.
        -> Threads: 
            ->> Threads are sub-processes of a process(s).
            ->> Threads share the same memory space.
            ->> Threads are used to perform multiple tasks simultaneously.
            ->> Threads are created using the pthread library.
        -> Process commands: 
            ->> ps command: Display the process status.
            ->> ps -e: Display all the processes.
            ->> ps -f: Display the full format.
            ->> ps -l: Display the long format.
            ->> ps -u: Display the user format.
            ->> ps -aux: Display all the processes in a user-readable format.
            ->> ps -f -u <username>: Display the processes of a user in the full format.
            ->> pstree command: Display the process tree.
            ->> pgrep command: Display the process ID of a process.
            ->> pgrep -u <username>: Display the process ID of a user.
            ->> pstree -p: Display the process tree with the process ID.
            ->> pstree -c -p: Display the process tree with the command and process ID.
>> Module 15- Process Management(Part 2):
    > Top commands:
        -> top command: Display the dynamic real-time view of the system.
        -> htop command: Display the dynamic real-time view of the system.
        -> uptime command: Display the system uptime.
        -> w command: Display the system uptime and the users who are logged in.
        -> who command: Display the users who are logged in.
        -> whoami command: Display the current user.
        -> last command: Display the last logged in users.
        -> last -n <number>: Display the last n logged in users.
        -> last -f <file_name>: Display the last logged in users from a file.
        -> last -t <time>: Display the last logged in users since a specific time.
        -> last -x: Display the system shutdown and reboot times.
        -> last -x -f <file_name>: Display the system shutdown and reboot times from a file.
        -> last -x -t <time>: Display the system shutdown and reboot times since a specific time.
    > Signals & Process(s) killing:
        -> Signals are used to communicate with the processes.
        -> Number of signals: 64.
        -> kill command: Send a signal to a process.
        -> kill -l: List the signals.
        -> kill -9 <PID>: Kill a process forcefully.
        -> kill -15 <PID>: Kill a process gracefully.
        -> kill -SIGKILL <PID>: Kill a process using the signal name.
        -> kill -SIGTERM <PID>: Kill a process using the signal name.
        -> killall command: Kill a process by name.
        -> killall -9 <process_name>: Kill a process by name forcefully.
        -> killall -15 <process_name>: Kill a process by name gracefully.
        -> killall -SIGKILL <process_name>: Kill a process by name using the signal name.
        -> killall -SIGTERM <process_name>: Kill a process by name using the signal name.
        -> pkill command: Kill a process by name.
        -> pkill -9 <process_name>: Kill a process by name forcefully.
        -> pkill -15 <process_name>: Kill a process by name gracefully.
        -> pkill -SIGKILL <process_name>: Kill a process by name using the signal name.
        -> pkill -SIGTERM <process_name>: Kill a process by name using the signal name.
    > Foreground & background processes:
        -> Foreground process: A process that runs in the foreground.
        -> Background process: A process that runs in the background.
        -> Use & in the end of the command to run the command in the background.
>> Module 16- Process Management(Part 3):
        -> jobs command: Display the background jobs.
        -> bg command: Move a process to the background.
        -> bg %<job_number>: Move a process to the background using the job number.
        -> fg command: Move a process to the foreground.
        -> fg %<job_number>: Move a process to the foreground using the job number.
        -> ctrl + z: Suspend a process.
        -> ctrl + c: Terminate a process.
        -> ctrl + d: Exit the shell.
        -> nohup <command>: Run a command that does not terminate when the shell is closed.
>> Module 17- Networking management(Part 1):
    > Networking:
        -> Networking is the practice of connecting computers and other devices to share resources.
        -> Networking is used to share files, printers, and internet connections.
        -> Networking is used to communicate with other devices.
        -> Networking is used to access remote resources.
        -> Networking is used to access the internet.
        -> /etc/netplan: Network configuration directory.
        -> Network manager is used to manage the network configuration.
    > Commands: 
        -> systemctl status NetworkManager: Display the status of the NetworkManager service.
        -> systemctl start NetworkManager: Start the NetworkManager service.
        -> systemctl stop NetworkManager: Stop the NetworkManager service.
        -> systemctl restart NetworkManager: Restart the NetworkManager service.
    > YAML (Yet Another Markup Language):
        -> YAML is a human-readable data serialization language.
        -> YAML is used to write configuration files.
        -> YAML is used to write data structures.
        -> YAML is used to write data exchange formats.
        -> YAML is used to write configuration management files.
        -> YAML is used to write data-oriented languages.
        -> YAML is used to write data serialization languages.
    > Network file configuration using YAML format:
        -> Network configuration files are written in the YAML format.
        -> Network configuration files are stored in the /etc/netplan directory.
        -> Network configuration files have the .yaml extension.
        -> Network configuration files have the following structure:
            ->> network: The network configuration.
            ->> version: The version of the network configuration.
            ->> renderer: The renderer of the network configuration.
            ->> ethernets: The ethernet configuration.
            ->> enp0s3: The ethernet interface.
            ->> dhcp4: The DHCP configuration.
            ->> dhcp6: The DHCP configuration.
            ->> addresses: The static IP address configuration.
            ->> gateway4: The gateway configuration.
            ->> nameservers: The DNS configuration.
            ->> search: The search domain configuration.
>> Module 18- Networking management(Part 2):
    > systemctl command:
        -> systemctl status <service_name>: Display the status of the <service_name> service.
        -> systemctl start <service_name>: Start the <service_name> service.
        -> systemctl stop <service_name>: Stop the <service_name> service.
        -> systemctl restart <service_name>: Restart the <service_name> service.
    > scp:
        -> scp command: Securely copy files between hosts.
        -> scp is a part of the openssh package.
        -> scp <source> <destination>: Copy files between hosts.
        -> scp -r <source> <destination>: Copy directories between hosts.
        -> scp -v <source> <destination>: Copy files between hosts verbosely.
        -> scp -P <port> <source> <destination>: Copy files between hosts using a specific port.
        -> scp -i <identity_file> <source> <destination>: Copy files between hosts using an identity file.
        -> scp -l <limit> <source> <destination>: Copy files between hosts using a bandwidth limit.
        -> scp -C <source> <destination>: Copy files between hosts using compression.
        -> scp -p <source> <destination>: Copy files between hosts preserving the file attributes.
        -> scp -q <source> <destination>: Copy files between hosts quietly.
        -> scp -r -v -P -i -l -C -p -q <source> <destination>: Copy files between hosts recursively, verbosely, using a specific port, using an identity file, using a bandwidth limit, using compression, preserving the file attributes, and quietly. 
    > sftp:
        -> sftp command: Securely transfer files between hosts.
        -> sftp is a part of the openssh package.
        -> sftp <username>@<hostname>: Connect to a host.
        -> sftp -P <port> <username>@<hostname>: Connect to a host using a specific port.
        -> sftp -i <identity_file> <username>@<hostname>: Connect to a host using an identity file.
        -> sftp -b <batch_file> <username>@<hostname>: Connect to a host using a batch file.
        -> sftp -v <username>@<hostname>: Connect to a host verbosely.
        -> sftp -q <username>@<hostname>: Connect to a host quietly.
        -> sftp -r <source> <destination>: Transfer files between hosts recursively.
        -> sftp -P -i -b -v -q -r <port> <identity_file> <batch_file> <username>@<hostname>: Connect to a host using a specific port, using an identity file, using a batch file, verbosely, quietly, and transfer files between hosts recursively.
    > rsync command:
        -> rsync command: Securely copy files between hosts.
        -> rsync is a part of the rsync package.
        -> rsync <source> <destination>: Copy files between hosts.
        -> rsync -a <source> <destination>: Copy files between hosts preserving the file attributes.
        -> rsync -r <source> <destination>: Copy directories between hosts.
        -> rsync -v <source> <destination>: Copy files between hosts verbosely.
        -> rsync -z <source> <destination>: Copy files between hosts using compression.
        -> rsync -P <source> <destination>: Copy files between hosts using partial transfer.
        -> rsync -l <source> <destination>: Copy files between hosts using symbolic links.
        -> rsync -t <source> <destination>: Copy files between hosts preserving the modification times.
        -> rsync -r -v -z -a -P -l -t <source> <destination>: Copy files between hosts recursively, verbosely, using compression, preserving the file attributes, using partial transfer, using symbolic links, and preserving the modification times.
    > Using rysn over the network:
        -> rsync -avz -e "ssh -p <port>" <source> <username>@<hostname>:<destination>: Copy files between hosts using rsync over the network.
        -> rsync -avz -e "ssh -p <port>" <username>@<hostname>:<source> <destination>: Copy files between hosts using rsync over the network.
        -> rsync -avz -e "ssh -p <port>" <username>@<hostname>:<source> <username>@<hostname>:<destination>: Copy files between hosts using rsync over the network.
        -> rsync -avz -e "ssh -p <port>" --delete <source> <username>@<hostname>:<destination>: Copy files between hosts using rsync over the network and delete the files that are not in the source.
    ** Use Superuser privileges to run the commands.
>> Module 19- Networking management(Part 3):
    > wget command:
        -> wget command: Download files from the internet.
        -> wget <URL>: Download files from the internet.
        -> wget -c <URL>: Resume the download.
        -> wget -b <URL>: Download files in the background.
        -> wget -q <URL>: Download files quietly.
        -> wget -O <file_name> <URL>: Download files with a specific name.
        -> wget -P <directory> <URL>: Download files to a specific directory.
        -> wget -r <URL>: Download files recursively.
        -> wget -np <URL>: Download files recursively without going to the parent directory.
        -> wget -m <URL>: Download files recursively with mirroring.
        -> wget -k <URL>: Download files recursively and convert the links.
        -> wget -l <level> <URL>: Download files recursively up to a specific level.
        -> wget -A <pattern> <URL>: Download files recursively with a specific pattern.
        -> wget -R <pattern> <URL>: Download files recursively without a specific pattern.
        -> wget -i <file_name>: Download files from a file.
    > ifconfig & ip:
        -> ifconfig command: Display the network configuration.
        -> ifconfig -a: Display all the network configuration.
        -> ip command: Display the network configuration.
        -> ip addr show: Display the network configuration.
        -> ip -4 addr show: Display the IPv4 network configuration.
        -> ip -6 addr show: Display the IPv6 network configuration.
        -> ifconfig <interface_name>: Display the network configuration of an interface.
        -> ip addr show dev <interface_name>: Display the network configuration of an interface.
    > Getting the default gateway and DNS server:
        -> route command: Display the routing table.
        -> route -n: Display the routing table numerically.
        -> ip route show: Display the routing table.
        -> ip route show default: Display the default gateway.
        -> cat /etc/resolv.conf: Display the DNS configuration.
        -> Capital G in flags of route command indicates the default gateway.
    > Configuring the network:
        -> ifconfig <interface_name> down: Disable an interface.
        -> ifconfig <interface_name> up: Enable an interface.
        -> ip link set <interface_name> down: Disable an interface.
        -> ip link set <interface_name> up: Enable an interface.
        -> ip address add <ip_address> dev <interface_name>: Add an IP address to an interface.
        -> ip address del <ip_address> dev <interface_name>: Delete an IP address from an interface.
        -> ifconfig <interface_name> <ip_address>: Add an IP address to an interface.
        -> route del default gw <ip_address>: Delete the default gateway.
        -> route add default gw <ip_address>: Add the default gateway.
        -> ip route del default: Delete the default gateway.
        -> ip route add default via <ip_address>: Add the default gateway.
        -> ifconfig <interface> hw ether <mac_address>: Change the MAC address.
        -> ip link set <interface> address <mac_address>: Change the MAC address.