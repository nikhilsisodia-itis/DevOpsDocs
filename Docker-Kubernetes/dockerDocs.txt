Course Description:
  
  > Course name: Docker & Kubernetes: The Practical Guide.
  > Course instructor: Maximilian SchwarzmÃ¼ller.
  > Start date: 18-Feb-2025.


> Module 1- 

  >> Course introduction.
  >> Course prerequisites.
  >> Course content.

> Module 2- 

  >> What is Docker?
    >>> Docker is container technology.
    >>> It is a tool used for creating and managing containers.

  >> What is a container?
    >>> A container is a lightweight, standalone, executable package of software that includes everything needed to run an application.
    >>> It includes the code, runtime, system tools, system libraries, and settings.
    >>> Always give the exact same application and execution behavior, regardless of the environment.
  
> Module 3-

  >> What is the use of Containers in software development?
    >>> Containers are used to package software applications and their dependencies.
    >>> They provide a consistent environment for development, testing, and deployment.
    >>> They help in isolating applications from the underlying system.
    >>> They make it easy to deploy applications across different environments.

> Module 4- 

  >> Difference between Containers & Virtual Machines.
    >>> Containers are lightweight and use the host OS, whereas VMs are heavyweight and have their OS.
    >>> Containers start up quickly, whereas VMs take time to boot.
    >>> Containers use fewer resources than VMs.
    >>> Containers are portable, whereas VMs are not.

> Module 5- 

  >> Docker installation.
    >>> Download Docker from the official website.
    >>> Install Docker on your system.
    >>> Verify the installation by running the `docker --version` command.

> Module 6- 

  >> Images & Containers.
    >>> Images are read-only templates used to create containers.
    >>> Containers are running instances of images.
    >>> Images are built using a Dockerfile.
    >>> Containers can be started, stopped, and deleted.

> Module 7-

  >> Creating a docker image:
    >>> FROM <image_name> : Base image.
    >>> WORKDIR <directory> : Specify the working directory.
    >>> COPY <directory> : Copy files from the host to the container.
      ->> COPY .. : Copy files from the host to the container.
      ->> First dot "." in COPY Commands copies all the folders and files from the current directory to the container.
      ->> Second dot ".." in COPY Commands copies all the folders and files from the parent directory to the container.
    
    OR 
    
    >>> COPY . </directory> : Copy files from the container to the specific directory.

    OR 

    >>> COPY . ./<directory> : Copy files from the container to the specific directory.

    >>> RUN <command> : Run a command in the container.
    >>> EXPOSE <port> : Expose a port in the container.
    >>> CMD ["executable"] : Run the specified command when the container starts.
  
> Module 8-
  >> After creating your first docker image.
  >> Execute the docker build command in the terminal: docker build . 
  >> "." to build the docker image in the current directory.
  >> After you build the docker image, an image ID will be generated.
  >> docker run <image_id> : Used to run the docker image.
  >> docker ps : List all the running containers.
  >> docker ps -a : List all the containers.
  >> docker stop <container_id> : Stop the running container.
  >> docker run -p <host_port>:<container_port> <image_id> : Run the container with port mapping.

> Module 9- 
  >> Once you create an image, you cannot change it or any changes will not be reflected in the image.
  >> You need to create a new image with the changes.
  >> It happens because the image takes a snapshot, when we create it. 
  >> To update the image, you need to create a new image with the changes.

> Module 10-
  >> Docker images are layer based.
  >> Each instruction in the Dockerfile creates a new layer.
  >> Layers are cached, and only the changed layers are rebuilt.
  >> This makes the build process faster.
  >> Layer-based architecture:
    >>> Layer 1: Base image.
    >>> Layer 2: Copy files.
    >>> Layer 3: Run command.
    >>> Layer 4: Expose port.
    >>> Layer 5: CMD.
  > When, one layer is changed, subsequent layers are rebuilt or re-executed.

> Module 11-
  >> A container is based on an image.
  >> An image is a read-only template used to create containers.
  >> Containers are running instances of images.
  >> Containers can be started, stopped, and deleted.
  >> Containers are isolated from each other and the host system.

> Module 12-
  >> docker --help : List all the available commands.
  >> docker <command> --help : Get help for a specific command.
  >> docker ps : List all the running containers.
  >> docker ps -a : List all the containers.
  >> docker start <container_id> OR <container_name> : Restart a stopped container.

> Module 13- 
  >> docker run <container_id> VS docker start <container_id> : Docker run creates a new container, whereas docker start restarts a stopped container.
  >> docker run creates a new container every time you run it.
  >> docker start restarts a stopped container.
  >> docker run <container_id> : Runs the container in attached mode.
  >> docker start <container_id> : Runs the terminal in detached mode.
  >> Attached mode will show the output(s) in the terminal.
  >> Detached mode will not show the output(s) in the terminal.

  >> Run a container in detached mode:
    >>> docker -p <host_port>:<container_port> -d <image_id> : Run the container in detached mode.

  >> Attach to a running container:
    >>> docker attach <container_id> : This command attaches the user to a running container.
  
  >> docker logs <container_id> : View the logs of a container.
  >> docker logs -f <container_id> : View the logs of a container in real-time. This command attaches the user to the container.

  >> Start a stopped container in attached mode:
    >>> docker start -a <container_id> : Start a stopped container in attached mode.

> Module 14-
  >> docker run -i <image_id> : Run the container in interactive mode. This command let you interact with the container.
  >> This command keep the Standard Input (stdin) open, even if the user is not attached to the container.
  >> docker run -it <image_id> : Run the container in interactive mode with a terminal.
  >> This command allows the user to interact with the container, as if they were using a terminal.
  
  >> docker start -a -i <container_id> : Start a stopped container in attached and interactive mode.
  >> This command attaches the user to the container and allows them to interact with it.
  
> Module 15- 
  >> docker rm <container_id> : Remove a container.
  >> docker container prune : Remove all stopped containers.
  >> In order to remove a container(s) it should not be in running stage.
  >> Remove multiple containers at once:
    >>> docker rm <container_id1> <container_id2> <container_id3> : Remove multiple containers at once.

  >> docker images : Lists all the images created.
  >> docker rmi <image_id> : Remove an image.
  >> docker image prune : Remove all dangling images.
  >> An image(s) can only be removed if there are no containers running from that image.
  >> If there are any container running or stopped container based on an image, then the image cannot be removed and the container should be removed first. 
  >> Remove multiple images at once:
    >>> docker rmi <image_id1> <image_id2> <image_id3> : Remove multiple images at once.

> Module 16-
  >> docker --rm <image_id> : Remove the container after it stops running.
  >> This command removes the container after it stops running.
  >> docker run --rm <image_id> : Remove the container after it stops running.

> Module 17-
  >> docker image inspect <image_id> : Inspect an image.
  >> This command provides detailed information about the image.

> Module 18- 
  >> docker cp <directory or file> <container_id>:<directory> : Copy files from the host to the container.
  >> docker cp <container_id>:<directory or file> <directory> : Copy files from the container to the host.
  >> This command is used to copy files between the host and the container.

> Module 19-
  >> docker run --name <container_name> <image_id> : Run the container with a specific name.
  >> This command allows to give specific name to a container.
  >> Docker images tag:
    >>> Docker images are tagged with a repository name and a tag.
    >>> The repository name is the name of the image.
    >>> The tag is the version of the image.
    >>> docker build -t <repository_name>:<tag> . : Tag the image while building it.
    >>> Image tag consist of two parts: 
      ->> Repository name.
      ->> Tag.
    >>> Syntax: <repository_name>:<tag>
    >>> Example: docker build -t nginx:latest .
    >>> Example: docker build -t python:3.8 .
  >> All the tags related to a repository can be found on the Docker Hub.
  >> Running a docker container based on an image using a tag:
    >>> docker run <repository_name>:<tag> : Run the container based on the image with the specified tag.
  >> docker image prune command only removes images with no repository and tags.
