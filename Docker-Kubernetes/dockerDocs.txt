Course Description:
  
  > Course name: Docker & Kubernetes: The Practical Guide.
  > Course instructor: Maximilian SchwarzmÃ¼ller.
  > Start date: 18-Feb-2025.


> Module 1- 

  >> Course introduction.
  >> Course prerequisites.
  >> Course content.

> Module 2- 

  >> What is Docker?
    >>> Docker is container technology.
    >>> It is a tool used for creating and managing containers.

  >> What is a container?
    >>> A container is a lightweight, standalone, executable package of software that includes everything needed to run an application.
    >>> It includes the code, runtime, system tools, system libraries, and settings.
    >>> Always give the exact same application and execution behavior, regardless of the environment.
  
> Module 3-

  >> What is the use of Containers in software development?
    >>> Containers are used to package software applications and their dependencies.
    >>> They provide a consistent environment for development, testing, and deployment.
    >>> They help in isolating applications from the underlying system.
    >>> They make it easy to deploy applications across different environments.

> Module 4- 

  >> Difference between Containers & Virtual Machines.
    >>> Containers are lightweight and use the host OS, whereas VMs are heavyweight and have their OS.
    >>> Containers start up quickly, whereas VMs take time to boot.
    >>> Containers use fewer resources than VMs.
    >>> Containers are portable, whereas VMs are not.

> Module 5- 

  >> Docker installation.
    >>> Download Docker from the official website.
    >>> Install Docker on your system.
    >>> Verify the installation by running the `docker --version` command.

> Module 6- 

  >> Images & Containers.
    >>> Images are read-only templates used to create containers.
    >>> Containers are running instances of images.
    >>> Images are built using a Dockerfile.
    >>> Containers can be started, stopped, and deleted.

> Module 7-

  >> Creating a docker image:
    >>> FROM <image_name> : Base image.
    >>> WORKDIR <directory> : Specify the working directory.
    >>> COPY <directory> : Copy files from the host to the container.
      ->> COPY .. : Copy files from the host to the container.
      ->> First dot "." in COPY Commands copies all the folders and files from the current directory to the container.
      ->> Second dot ".." in COPY Commands copies all the folders and files from the parent directory to the container.
    
    OR 
    
    >>> COPY . </directory> : Copy files from the container to the specific directory.

    OR 

    >>> COPY . ./<directory> : Copy files from the container to the specific directory.

    >>> RUN <command> : Run a command in the container.
    >>> EXPOSE <port> : Expose a port in the container.
    >>> CMD ["executable"] : Run the specified command when the container starts.
  
> Module 8-
  >> After creating your first docker image.
  >> Execute the docker build command in the terminal: docker build . 
  >> "." to build the docker image in the current directory.
  >> After you build the docker image, an image ID will be generated.
  >> docker run <image_id> : Used to run the docker image.
  >> docker ps : List all the running containers.
  >> docker ps -a : List all the containers.
  >> docker stop <container_id> : Stop the running container.
  >> docker run -p <host_port>:<container_port> <image_id> : Run the container with port mapping.

> Module 9- 
  >> Once you create an image, you cannot change it or any changes will not be reflected in the image.
  >> You need to create a new image with the changes.
  >> It happens because the image takes a snapshot, when we create it. 
  >> To update the image, you need to create a new image with the changes.

> Module 10-
  >> Docker images are layer based.
  >> Each instruction in the Dockerfile creates a new layer.
  >> Layers are cached, and only the changed layers are rebuilt.
  >> This makes the build process faster.
  >> Layer-based architecture:
    >>> Layer 1: Base image.
    >>> Layer 2: Copy files.
    >>> Layer 3: Run command.
    >>> Layer 4: Expose port.
    >>> Layer 5: CMD.
  > When, one layer is changed, subsequent layers are rebuilt or re-executed.

> Module 11-
  >> A container is based on an image.
  >> An image is a read-only template used to create containers.
  >> Containers are running instances of images.
  >> Containers can be started, stopped, and deleted.
  >> Containers are isolated from each other and the host system.