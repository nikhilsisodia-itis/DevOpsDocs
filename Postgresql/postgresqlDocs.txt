> Module 1- Introduction:

  > What is a Database?
    >> A database is a collection of data stored in an organized OR pre-specified manner.
    >> It is used to store and retrieve data for various applications.
    >> A database can be of different types like SQL, NoSQL, etc.
    >> Used to perform various operations like insert, update, delete, and select data.

  > Database VS DBMS:
    >> Database: It is a storage unit.
    >> DBMS: It is a software that is used to manage the database.
    >> Database is a collection of related data whereas DBMS is a collection of programs that are used to manage the database.

  > What is RDDMS?
    >> RDBMS stands for Relational Database Management System.
    >> It is a type of DBMS that stores data in a structured format.
    >> It is used to store data in tables and rows.
    >> It is used to establish a relationship between tables.

  > What is SQL?
    >> SQL stands for Structured Query Language.
    >> It is used to communicate with the database.
    >> It is used to perform various operations like insert, update, delete, and select data.
    >> It is used to create and modify the database schema. 

  > What is PostgreSQL?
    >> PostgreSQL is an open-source RDBMS.
    >> It is used to store and retrieve data for various applications.
    >> It is used to perform various operations like insert, update, delete, and select data.
    >> It is used to create and modify the database schema.

  > SQL VS PostgreSQL:
    >> SQL: It is a language used to communicate with the database.
    >> PostgreSQL: It is an open-source RDBMS.
    >> SQL is used to perform various operations like insert, update, delete, and select data.
    >> PostgreSQL is used to store and retrieve data for various applications.

> Module 2- Installation:

  > How to install PostgreSQL?
    >> Step 1: Download the PostgreSQL installer from the official website.
    >> Step 2: Run the installer and follow the installation steps.
    >> Step 3: Set the password for the default user.
    >> Step 4: Start the PostgreSQL service.
    >> Step 5: Access the PostgreSQL database using the command line or GUI tools.

  > How to use the psql shell on Ubuntu?
    >> Step 1: Open the terminal.
    >> Step 2: Type the command "sudo -iu postgres" to switch to the postgres user.
      >>> The -i option is used to start a login shell.
      >>> The -u option is used to specify the user.
    >> Step 3: Type the command "psql" to access the PostgreSQL shell.
      >>> The psql command is used to access the PostgreSQL shell.
    >> Step 4: You can now run SQL queries in the psql shell.

> Module 3- Basics of PostgreSQL:
  
  > Create a Database:
    >> Syntax: CREATE DATABASE database_name;
    >> Example: CREATE DATABASE testdb;

  > Switch to a Database:
    >> Syntax: \c database_name;
    >> Example: \c testdb;

> Module 4- Database VS Schema VS Table:

  > Database:
    >> A database is a collection of related data stored in an organized manner.
    >> It is used to store and retrieve data for various applications.
    >> It can contain multiple schemas and tables.

  > Schema:
    >> A schema is a collection of database objects like tables, views, indexes, etc.
    >> It is used to organize and manage the database objects.
    >> It can be used to group related database objects together.

  > Table:
    >> A table is a collection of data stored in rows and columns.
    >> It is used to store and retrieve data in a structured format.
    >> It is used to establish a relationship between data.

> Module 5- Basic Database Operations:
  
  > Creating, connecting, listing, & dropping a database:
    >> Create a Database: CREATE DATABASE database_name;
    >> Connect to a Database: \c database_name;
    >> List Databases: \l;
    >> Drop a Database: DROP DATABASE database_name;

  > Listing down the existing database:
    >> Execute the following Query using the Query tool in PgAdmin OR from the psql shell: 
      >>> SELECT datname FROM pg_database;
      >>> datname is the column name that contains the database names.
      >>> pg_database is the system catalog table that contains the database information.

    OR

    >> Run the following command from the psql shell:
      >>> \l
      >>> The \l command is used to list down the existing databases.
  
  *NOTE*: Uppercase and lowercase can be used for queries in PostgreSQL.
  *NOTE*: Semicolon is used to terminate the query in PostgreSQL.
  *NOTE*: The backslash (\) is used to execute the psql shell commands.
  *NOTE*: The psql shell commands are case-insensitive.
  *NOTE*: Uppercase is preferred & used for more readability.

  > Switch to a different database:
    >> Syntax: \c database_name;
    >> Example: \c testdb;

  > Delete a database:
    >> Syntax: DROP DATABASE database_name;
    >> Example: DROP DATABASE testdb;

> Module 6- Basic Table Operations:

  > CRUD Operations:
    >> CRUD stands for Create, Read, Update, and Delete.
    >> It is used to perform various operations on the database.
    >> It is used to insert, update, delete, and select data from the database.

  > What is a Table?
    >> A table is a collection of data stored in rows and columns.
    >> It is used to store and retrieve data in a structured format.
    >> It is used to establish a relationship between data.

  > Creating a table:
    >> Syntax: CREATE TABLE table_name (column1 datatype, column2 datatype, ...);
    >> Example: CREATE TABLE employees (id INT, name VARCHAR(50), age INT);
  
  > Display the table structure:
    >> Syntax: \d table_name;
      >>> \d is a psql shell command used to display the table structure.
    >> Example: \d employees;

  > Inserting data into a table:
    >> Syntax: INSERT INTO table_name (column1, column2, ...) VALUES (value1, value2, ...);
    >> Example: INSERT INTO employees (id, name, age) VALUES (1, 'John Doe', 30);

  > Reading data from a table:
    > Display all rows from a table:
      >> Syntax: SELECT * FROM table_name;
      >> Example: SELECT * FROM employees;
    
    > Display individual columns from a table:
      >> Syntax: SELECT column1, column2, ... FROM table_name;
      >> Example: SELECT id, name FROM employees;
    
  > Updating data in a table:
    >> Syntax: UPDATE table_name SET column1 = value1, column2 = value2 WHERE condition;
    >> Example: UPDATE employees SET age = 35 WHERE id = 1;

  > Deleting data from a table:
    >> Syntax: DELETE FROM table_name WHERE condition;
    >> Example: DELETE FROM employees WHERE id = 1;

> Module 7- Datatypes & Constraints:
  
  > Datatypes:
    >> Datatypes are used to define the type of data that can be stored in a column.
    >> PostgreSQL supports various datatypes like integer, text, boolean, etc.
    >> Datatypes are used to enforce data integrity and consistency.

  > Constraints:
    >> Constraints are used to enforce rules on the data stored in a table.
    >> Constraints are used to maintain data integrity and consistency.
    >> PostgreSQL supports various constraints like NOT NULL, UNIQUE, PRIMARY KEY, FOREIGN KEY, etc.

  > Common Datatypes:
    >> INTEGER: Used to store whole numbers.
    >> TEXT: Used to store variable-length character strings.
    >> BOOLEAN: Used to store true or false values.
    >> DATE: Used to store date values.
    >> TIMESTAMP: Used to store date and time values.
    >> SERIAL: Used to create auto-incrementing columns.

  > Common Constraints:
    >> NOT NULL: Ensures that a column cannot have NULL values.
    >> UNIQUE: Ensures that all values in a column are unique.
    >> PRIMARY KEY: Ensures that each row in a table is unique.
    >> FOREIGN KEY: Ensures that values in a column match values in another table.
    >> CHECK: Ensures that values in a column meet a specific condition.

  > Adding constraints to a table:
    >> Syntax: CREATE TABLE table_name (column1 datatype CONSTRAINT constraint_name constraint_type, ...);
    >> Example: CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50) NOT NULL, age INT CHECK (age >= 18));

> Module 8- Data Refining:

  > Data Refining:
    >> Data refining is the process of cleaning and transforming raw data into useful information.
    >> It is used to improve the quality and accuracy of the data.
    >> Data refining involves data cleaning, data transformation, and data enrichment.
  
  > Clause:
    >> A clause is a part of an SQL statement that specifies conditions for the query.
    >> Clauses are used to filter, sort, group, and limit the data returned by a query.
    >> Common clauses in PostgreSQL are WHERE, ORDER BY, GROUP BY, and LIMIT.

  > WHERE Clause:
    >> The WHERE clause is used to filter rows based on a specified condition.
    >> It is used to retrieve rows that meet the specified condition.
    >> Syntax: SELECT * FROM table_name WHERE condition;
    >> Example: SELECT * FROM employees WHERE age > 30;

  > Distinct Keyword:
    >> The DISTINCT keyword is used to retrieve unique values from a column.
    >> It is used to remove duplicate values from the result set.
    >> Syntax: SELECT DISTINCT column_name FROM table_name;
    >> Example: SELECT DISTINCT department FROM employees;

  > ORDER BY Clause:
    >> The ORDER BY clause is used to sort the result set based on one or more columns.
    >> It is used to sort the rows in ascending or descending order.
    >> Syntax: SELECT * FROM table_name ORDER BY column_name [ASC|DESC];
    >> Example: SELECT * FROM employees ORDER BY age DESC;

  > LIMIT Clause:
    >> The LIMIT clause is used to limit the number of rows returned by a query.
    >> It is used to retrieve a specific number of rows from the result set.
    >> Syntax: SELECT * FROM table_name LIMIT number;
    >> Example: SELECT * FROM employees LIMIT 5;