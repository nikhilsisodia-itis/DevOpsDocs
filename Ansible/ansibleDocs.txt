> What is Ansible?
  >> Ansible is an IT automation tool.
  >> Maintained by Red Hat.
  >> It is written in Python.

> Need of Ansible?
  >> To automate the tasks.
  >> To manage the servers.
  >> To deploy the applications.

> Advantages of Ansible?
  >> Uses simple and easy to learn language- YAML.
  >> Agentless: No need to install any agent on the remote machine.
  >> Configuration Management: To manage the configurations of the servers.
  >> Scalability: Can manage multiple servers at a time.
  >> Idempotent: Can run the same playbook multiple times without any issues.
  >> Open Source: Free to use.
  >> Integration: Can be integrated with other tools like Jenkins, Docker, etc.

> Componenets of Ansible:
  >> Modules: Predefined tasks that can be executed on the remote machine.
  >> Playbooks: Collection of tasks that can be executed on the remote machine.
  >> Inventory: List of servers on which the tasks need to be completed.
  >> Roles: Collection of playbooks.

> Ansible Playbook:
  >> Playbook is a collection of tasks.
  >> Playbook is written in YAML format.
  >> Playbook is executed on the remote machine.
  >> Playbook is executed using the command: ansible-playbook <absolute path to the playbook OR .yml file>.

> Creating first playbook:
  >> Create a file with .yml extension.
  >> --- is the starting of the file.
  >> - is the starting of the task.
  >> name: is the name of the task.
  >> hosts: is the server on which the task needs to be executed.
  >> hosts: all : Task needs to be executed on all the servers.
  >> tasks: is the list of tasks that needs to be executed.
    >>> - name: is the name of the task.
  
    >>> debug : is the module that is used to print the message.
    >>> msg: is the message that needs to be printed.
  
    >>> Install a service:
          tasks:
            - name: "Install <Service_name>"
              <package_manager_name>:
                name: <service_name>
                state: present
    
    >>> Copy a file:
          tasks:
          - name: "Copy <content_name>"
            copy: # Module to copy the file.
              src: <source_file_path>
              dest: <destination_file_path>
              owner: <owner_name>
              group: <group_name>
              mode: <permission> # Can be octal or symbolic.
              backup: yes # To take the backup of the file.

  >> ansible-playbook <absolute path to the playbook OR .yml file> : Command to run the playbook.
  >> ansible-playbook --syntax-check <absolute path to the playbook OR .yml file> : Command to check the syntax of the playbook.

  >> Tasks are performed sequentially.
  >> The task that is written first, will be executed and completed first followed by the next task.

> Ansible Inventory:
  >> Inventory is the list of servers on which the tasks need to be executed.
  >> Inventory can be written in two ways:
    >>> Static Inventory: List of servers written in a file.
    >>> Dynamic Inventory: List of servers generated dynamically.

> Creating first inventory:
  >> Create a file with .ini extension.
  >> Add the list of servers in the file.
  >> ansible-playbook <absolute path to the playbook OR .yml file> -i <absolute path to the inventory file> : Command to run the playbook with the inventory file.

  >> ansible-inventory --list : Command to list the servers in the inventory file.

> Ansible File Modules:
  >> Creating a new file at a specific location:
    >>> createFile.yml
        ---
        - name: "Create a new file"
          hosts: <local OR remote>

          tasks:
            - name: "Create a new file"
              file:
                path: <path_where_the_file_needs_to_be_created>
                state: touch

    >>> createDirectory.yml
        ---
        - name: "Create a new directory"
          hosts: <local OR remote>

          tasks:
            - name: "Create a new directory"
              file:
                path: <path_where_the_directory_needs_to_be_created>
                state: directory
    
    >>> deleteFile.yml
        ---
        - name: "Delete a file"
          hosts: <local OR remote>

          tasks:
            - name: "Delete a file"
              file:
                path: <path_where_the_file_needs_to_be_deleted>
                state: absent

    >>> deleteDirectory.yml
        ---
        - name: "Delete a directory"
          hosts: <local OR remote>

          tasks:
            - name: "Delete a directory"
              file:
                path: <path_where_the_directory_needs_to_be_deleted>
                state: absent

    >>> changePermission.yml
        ---
        - name: "Change the permission of a file"
          hosts: <local OR remote>

          tasks:
            - name: "Change the permission of a file"
              file:
                path: <path_where_the_file_is_present>
                mode: <permission> # Can be octal or symbolic

> Run scripts using Ansible:
  >> Run a script on the remote machine:
    >>> runScript.yml
        ---
        - name: "Run a script"
          hosts: <remote>

          tasks:
            - name: "Run a script"
              script:
                src: <path_to_the_script>

> Running cron jobs:
  >> Run a cron job on the remote machine:
    >>> runCronJob.yml
        ---
        - name: "Run a cron job"
          hosts: <remote>

          tasks:
            - name: "Run a cron job"
              cron:
                name: <name_of_the_cron_job>
                minute: <minute>
                hour: <hour>
                day: <day>
                month: <month>
                weekday: <weekday>
                job: <command_to_be_executed>

> Remove a cron job:
  >> Remove a cron job on the remote machine:
    >>> removeCronJob.yml
        ---
        - name: "Remove a cron job"
          hosts: <remote>

          tasks:
            - name: "Remove a cron job"
              cron:
                name: <name_of_the_cron_job> # Name of the cron job should be exact as the name of the cron job that needs to be removed.
                state: absent

> Disable a cronjob:
  >> Simple add the "disable: yes" in the cron job.

> Using environment variables:
  >> Use the environment variable in the playbook:
    >>> useEnvironmentVariable.yml
        ---
        - name: "Use the environment variable"
          hosts: <remote>

          tasks:
            - name: "Use the environment variable"
              shell: echo $<environment_variable_name>
              environment:
                <environment_variable_name>: <value>
              state: absent # To remove the environment variable.        

> User Management:
  >> Create a new user:
    >>> createUser.yml
        ---
        - name: "Create a new user"
          hosts: <remote>

          tasks:
            - name: "Create a new user"
              user:
                name: <user_name>
                comment: <comment>
                password: "{{ '<password>' | password_hash('sha512') }}"
                home: <home_directory> # Default is /home/<user_name>
                shell: <shell_name> # Default is /bin/bash
                group: <group_name> # Default is <user_name>
                
                OR

                groups: <group_name> # To add the user to multiple groups.
                state: present

  >> Delete a user:
    >>> deleteUser.yml
        ---
        - name: "Delete a user"
          hosts: <remote>

          tasks:
            - name: "Delete a user"
              user:
                name: <user_name>
                state: absent

  >> Change the password of a user:
    >>> changePassword.yml
        ---
        - name: "Change the password of a user"
          hosts: <remote>

          tasks:
            - name: "Change the password of a user"
              user:
                name: <user_name>
                password: "{{ '<password>' | password_hash('sha512') }}"
                state: present

  >> Change the shell of a user:
    >>> changeShell.yml
        ---
        - name: "Change the shell of a user"
          hosts: <remote>

          tasks:
            - name: "Change the shell
              user:
                name: <user_name>
                shell: <shell_name>
                state: present

> Kill a process:
  >>> killProcess.yml
      ---
      - name: "Kill a process"
        hosts: <remote>

        tasks:
          - name: "Kill a process"
            shell: kill -9 <process_id>

> Stop a service:
  >>> stopService.yml
      ---
      - name: "Stop a service"
        hosts: <remote>

        tasks:
          - name: "Stop a service"
            service:
              name: <service_name>
              state: stopped

> Download a file:
  >>> downloadFile.yml
      ---
      - name: "Download a file"
        hosts: <remote>

        tasks:
          - name: "Download a file"
            get_url:
              url: <url_of_the_file>
              dest: <destination_path>

> Perform a task with sudo previleges:
  >>> gainSudoPrivileges.yml
      ---
      - name: "Perform a task with sudo previleges"
        hosts: <remote>

        tasks:
          - name: "Perform a task with sudo previleges"
            command: <command>
            become: yes
            become_user: <user_name>
            become_method: sudo

  >>> Run the: ansible-playbook <playbook_name.yml> with the --ask-become-pass flag to provide the password for the sudo user.
  >>> ansbible-playbook --ask-become-pass <playbook_name.yml>

> Variables in playbooks:
  
  >> Define the variables in the playbook:
    >>> variablesInPlaybook.yml
        ---
        - name: "Define the variables in the playbook"
          hosts: <remote>

          vars:
            <variable_name>: <value>

          tasks:
            - name: "Define the variables in the playbook"
              debug:
                msg: "{{ <variable_name> }}"
  
> Handlers in playbooks:
  >> Handlers are the tasks that are executed only when the task is notified.
  >> Handlers are defined at the end of the playbook.
  >> Handlers are notified using the notify keyword.
  >> Handlers are executed using the meta module.
  
  >> Define the handlers in the playbook:
    >>> handlersInPlaybook.yml
        ---
        - name: "Define the handlers in the playbook"
          hosts: <remote>

          tasks:
            - name: "Define the handlers in the playbook"
              debug:
                msg: "This is the task that will notify the handler."
              notify: "Handler"

          handlers:
            - name: "Handler"
              debug:
                msg: "This is the handler that will be executed

> Conditions in playbooks:
  >> Conditions are used to execute the task based on the condition.
  >> Conditions are defined using the when keyword.
  
  >> Define the conditions in the playbook:
    >>> conditionsInPlaybook.yml
        ---
        - name: "Define the conditions in the playbook"
          hosts: <remote>

          tasks:
            - name: "Define the conditions in the playbook"
              debug:
                msg: "This is the task that will be executed
              when: <condition>

  >> Use ansible <host> -m setup to get the facts of the host.
  >> Use the facts to define the conditions.

> Using loops in playbooks:
  >> Loops are used to execute the task multiple times.
  >> Loops are defined using the with_items keyword.
  
  >> Define the loops in the playbook:
    >>> loopsInPlaybook.yml
        ---
        - name: "Define the loops in the playbook"
          hosts: <remote>

          tasks:
            - name: "Define the loops in the playbook"
              debug:
                msg: "{{ item }}"
              loop:
                - <item1>
                - <item2>
                - <item3>
  >> Another way of defining the loops:
    >>> loopsInPlaybook.yml
        ---
        - name: "Define the loops in the playbook"
          hosts: <remote>
          vars: [list_of_items: [<item1>, <item2>, <item3>]]

          tasks:
            - name: "Define the loops in the playbook"
              debug:
                msg: "{{ item }}"
              loop: "{{ list_of_items }}"