> What is Ansible?
  >> Ansible is an IT automation tool.
  >> Maintained by Red Hat.
  >> It is written in Python.

> Need of Ansible?
  >> To automate the tasks.
  >> To manage the servers.
  >> To deploy the applications.

> Advantages of Ansible?
  >> Uses simple and easy to learn language- YAML.
  >> Agentless: No need to install any agent on the remote machine.
  >> Configuration Management: To manage the configurations of the servers.
  >> Scalability: Can manage multiple servers at a time.
  >> Idempotent: Can run the same playbook multiple times without any issues.
  >> Open Source: Free to use.
  >> Integration: Can be integrated with other tools like Jenkins, Docker, etc.

> Componenets of Ansible:
  >> Modules: Predefined tasks that can be executed on the remote machine.
  >> Playbooks: Collection of tasks that can be executed on the remote machine.
  >> Inventory: List of servers on which the tasks need to be completed.
  >> Roles: Collection of playbooks.

> Ansible Playbook:
  >> Playbook is a collection of tasks.
  >> Playbook is written in YAML format.
  >> Playbook is executed on the remote machine.
  >> Playbook is executed using the command: ansible-playbook <absolute path to the playbook OR .yml file>.

> Creating first playbook:
  >> Create a file with .yml extension.
  >> --- is the starting of the file.
  >> - is the starting of the task.
  >> name: is the name of the task.
  >> hosts: is the server on which the task needs to be executed.
  >> hosts: all : Task needs to be executed on all the servers.
  >> tasks: is the list of tasks that needs to be executed.
    >>> - name: is the name of the task.
  
    >>> debug : is the module that is used to print the message.
    >>> msg: is the message that needs to be printed.
  
    >>> Install a service:
          tasks:
            - name: "Install <Service_name>"
              <package_manager_name>:
                name: <service_name>
                state: present
    
    >>> Copy a file:
          tasks:
          - name: "Copy <content_name>"
            copy: # Module to copy the file.
              src: <source_file_path>
              dest: <destination_file_path>
              owner: <owner_name>
              group: <group_name>
              mode: <permission> # Can be octal or symbolic.
              backup: yes # To take the backup of the file.

  >> ansible-playbook <absolute path to the playbook OR .yml file> : Command to run the playbook.
  >> ansible-playbook --syntax-check <absolute path to the playbook OR .yml file> : Command to check the syntax of the playbook.

  >> Tasks are performed sequentially.
  >> The task that is written first, will be executed and completed first followed by the next task.

> Ansible Inventory:
  >> Inventory is the list of servers on which the tasks need to be executed.
  >> Inventory can be written in two ways:
    >>> Static Inventory: List of servers written in a file.
    >>> Dynamic Inventory: List of servers generated dynamically.

> Creating first inventory:
  >> Create a file with .ini extension.
  >> Add the list of servers in the file.
  >> ansible-playbook <absolute path to the playbook OR .yml file> -i <absolute path to the inventory file> : Command to run the playbook with the inventory file.

  >> ansible-inventory --list : Command to list the servers in the inventory file.

> Ansible File Modules:
  >> Creating a new file at a specific location:
    >>> createFile.yml
        ---
        - name: "Create a new file"
          hosts: <local OR remote>

          tasks:
            - name: "Create a new file"
              file:
                path: <path_where_the_file_needs_to_be_created>
                state: touch

    >>> createDirectory.yml
        ---
        - name: "Create a new directory"
          hosts: <local OR remote>

          tasks:
            - name: "Create a new directory"
              file:
                path: <path_where_the_directory_needs_to_be_created>
                state: directory
    
    >>> deleteFile.yml
        ---
        - name: "Delete a file"
          hosts: <local OR remote>

          tasks:
            - name: "Delete a file"
              file:
                path: <path_where_the_file_needs_to_be_deleted>
                state: absent

    >>> deleteDirectory.yml
        ---
        - name: "Delete a directory"
          hosts: <local OR remote>

          tasks:
            - name: "Delete a directory"
              file:
                path: <path_where_the_directory_needs_to_be_deleted>
                state: absent

    >>> changePermission.yml
        ---
        - name: "Change the permission of a file"
          hosts: <local OR remote>

          tasks:
            - name: "Change the permission of a file"
              file:
                path: <path_where_the_file_is_present>
                mode: <permission> # Can be octal or symbolic

> Run scripts using Ansible:
  >> Run a script on the remote machine:
    >>> runScript.yml
        ---
        - name: "Run a script"
          hosts: <remote>

          tasks:
            - name: "Run a script"
              script:
                src: <path_to_the_script>

> Running cron jobs:
  >> Run a cron job on the remote machine:
    >>> runCronJob.yml
        ---
        - name: "Run a cron job"
          hosts: <remote>

          tasks:
            - name: "Run a cron job"
              cron:
                name: <name_of_the_cron_job>
                minute: <minute>
                hour: <hour>
                day: <day>
                month: <month>
                weekday: <weekday>
                job: <command_to_be_executed>